generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  address_id   Int       @id @default(autoincrement())
  user_id      Int
  address_line String    @db.VarChar(255)
  city         String    @db.VarChar(100)
  postal_code  String    @db.VarChar(20)
  country      String    @db.VarChar(100)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model cart {
  cart_id    Int          @id @default(autoincrement())
  user_id    Int
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  users      users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  cart_items cart_items[]
}

model cart_items {
  cart_item_id Int       @id @default(autoincrement())
  cart_id      Int
  food_id      Int
  quantity     Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  cart         cart      @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade, onUpdate: NoAction)
  menu         menu      @relation(fields: [food_id], references: [food_id], onDelete: NoAction, onUpdate: NoAction)
}

model category {
  category_id          Int       @id @default(autoincrement())
  category_title       String    @unique @db.VarChar(100)
  category_description String?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)
  menu                 menu[]
}

model invoice {
  invoice_id   Int       @id @default(autoincrement())
  order_id     Int
  user_id      Int
  address_line String    @db.VarChar(255)
  city         String    @db.VarChar(100)
  postal_code  String    @db.VarChar(20)
  country      String    @db.VarChar(100)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  orders       orders    @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model menu {
  food_id      Int            @id @default(autoincrement())
  category_id  Int
  food_name    String         @db.VarChar(255)
  description  String?        @db.Text
  image        String?        @db.VarChar(255)
  price        Decimal        @db.Decimal(10, 2)
  availability Boolean        @default(true)
  discount     Decimal?       @default(0) @db.Decimal(10, 2)
  rating       Decimal?       @default(0) @db.Decimal(3, 2)
  prep_time    Int?           @default(0)
  calories     Int?           @default(0)
  ingredients  String[]
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  cart_items   cart_items[]
  category     category       @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  order_items  order_items[]
  tags_on_menu tags_on_menu[]

  @@index([category_id], map: "idx_menu_category_id")
}

model order_items {
  order_item_id     Int       @id @default(autoincrement())
  order_id          Int
  food_id           Int
  quantity          Int
  price_at_purchase Decimal   @db.Decimal(10, 2)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  menu              menu      @relation(fields: [food_id], references: [food_id], onDelete: NoAction, onUpdate: NoAction)
  orders            orders    @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  order_id    Int           @id @default(autoincrement())
  user_id     Int
  total_price Decimal       @db.Decimal(10, 2)
  status      order_status  @default(pending)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  updated_at  DateTime?     @default(now()) @db.Timestamp(6)
  invoice     invoice[]
  order_items order_items[]
  users       users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  payments    payments[]

  @@index([user_id], map: "idx_orders_user_id")
}

model payments {
  payment_id     Int            @id @default(autoincrement())
  order_id       Int
  payment_method payment_method
  payment_status payment_status @default(pending)
  amount         Decimal        @db.Decimal(10, 2)
  payment_time   DateTime?      @default(now()) @db.Timestamp(6)
  orders         orders         @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
  tag_id       Int            @id @default(autoincrement())
  tag_name     String         @unique @db.VarChar(100)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  tags_on_menu tags_on_menu[]
}

model tags_on_menu {
  menu_id Int
  tag_id  Int
  menu    menu @relation(fields: [menu_id], references: [food_id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([menu_id, tag_id])
}

model users {
  user_id    Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  email      String    @unique @db.VarChar(150)
  pwd        String    @db.VarChar(255)
  phone      String?   @db.VarChar(20)
  role       String    @default("user") // e.g. "user", "admin"
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  address    address[]
  cart       cart[]
  invoice    invoice[]
  orders     orders[]
}

enum order_status {
  pending
  paid
  cancelled
  delivered
}

enum payment_method {
  cash
  card
  paypal
}

enum payment_status {
  pending
  completed
  failed
}
