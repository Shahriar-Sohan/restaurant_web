name: Deploy to AWS EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: AWS Credential configures
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: AWS ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: build and push docker img to ECR
        run: |
          IMAGE_URI=${{secrets.ECR_REPOSITORY}}:latest
          docker buildx create --use
          docker buildx build --platform linux/arm64 -t $IMAGE_URI --push .

      # - name: Verify Docker image platform
      #   run: |
      #     IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:latest
      #     docker buildx imagetools inspect $IMAGE_URI | grep "Architecture"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > /home/${{ secrets.EC2_USER }}/.env
            echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> /home/${{ secrets.EC2_USER }}/.env
            echo "DEV_ADMIN_SECRET=${{ secrets.DEV_ADMIN_SECRET }}" >> /home/${{ secrets.EC2_USER }}/.env
            echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> /home/${{ secrets.EC2_USER }}/.env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/${{ secrets.EC2_USER }}/.env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /home/${{ secrets.EC2_USER }}/.env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> /home/${{ secrets.EC2_USER }}/.env

            docker pull ${{ secrets.ECR_REPOSITORY }}:latest
            docker stop restaurant || true
            docker rm restaurant || true
            docker run -d --restart unless-stopped --env-file /home/${{ secrets.EC2_USER }}/.env --name restaurant -p 80:3000 ${{ secrets.ECR_REPOSITORY }}:latest